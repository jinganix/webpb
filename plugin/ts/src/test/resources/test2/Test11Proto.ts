// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// Test11.proto

import * as Webpb from "webpb";

export interface ITest11 {
  test1: number;
  test11: ITest11;
}

export class Test11 implements ITest11, Webpb.WebpbMessage {
  test1!: number;
  test11!: ITest11;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "Test11";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ITest11) {
    Webpb.assign(p, this, []);
    p?.test11 && (this.test11 = Test11.create(p.test11));
    this.webpbMeta = () =>
      ({
        class: "Test11",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ITest11): Test11 {
    return new Test11(p);
  }

  static fromAlias(data?: unknown): Test11 {
    const p = data as Record<string, unknown>;
    p?.test11 && (p.test11 = Test11.fromAlias(p.test11));
    return Object.assign(new Test11(), p);
  }

  toWebpbAlias(): unknown {
    return Webpb.toAlias(this, {});
  }
}
