// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// Test2.proto

import * as Webpb from "webpb";

export interface ITest {
  test1: number;
  test2: boolean;
  isTest3: boolean;
}

export class Test implements ITest, Webpb.WebpbMessage {
  test1!: number;
  test2!: boolean;
  isTest3!: boolean;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "Test";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ITest) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "Test",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ITest): Test {
    return new Test(p);
  }

  static fromAlias(data?: unknown): ITest {
    return Test.create(data as ITest);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
