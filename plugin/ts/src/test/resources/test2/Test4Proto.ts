// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// Test4.proto

import * as Webpb from "webpb";

export interface ITest {
  test1: string;
}

export class Test implements ITest, Webpb.WebpbMessage {
  test1!: string;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: ITest) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Test",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: ITest): Test {
    return new Test(p);
  }

  static fromAlias(data: Record<string, unknown>): Test {
    return Test.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
