// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// Main.proto

import * as Webpb from "webpb";
import * as Extends2Proto from "./Extends2Proto";
import * as ExtendsProto from "./ExtendsProto";
import { Custom } from 'external/custom'

export interface IMain1 extends Extends2Proto.IExtends {
  foo_2: number;
  bar_2: string;
}

export class Main1 extends Extends2Proto.Extends implements IMain1, Webpb.WebpbMessage {
  foo_2!: number;
  bar_2!: string;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: IMain1) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Main1",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: IMain1): Main1 {
    return new Main1(p);
  }

  static fromAlias(data: Record<string, unknown>): Main1 {
    return Main1.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface IMain2 extends ExtendsProto.IExtends {
  foo_2: number;
  bar_2: string;
}

export class Main2 extends ExtendsProto.Extends implements IMain2, Webpb.WebpbMessage {
  foo_2!: number;
  bar_2!: string;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: IMain2) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Main2",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: IMain2): Main2 {
    return new Main2(p);
  }

  static fromAlias(data: Record<string, unknown>): Main2 {
    return Main2.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface IMain3 extends Extends2Proto.IExtends {
  foo_2: number;
  bar_2: string;
}

export class Main3 extends Extends2Proto.Extends implements IMain3, Webpb.WebpbMessage {
  foo_2!: number;
  bar_2!: string;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: IMain3) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Main3",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: IMain3): Main3 {
    return new Main3(p);
  }

  static fromAlias(data: Record<string, unknown>): Main3 {
    return Main3.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface IMain4 extends ICustom {
  foo_2: number;
  bar_2: string;
}

export class Main4 extends Custom implements IMain4, Webpb.WebpbMessage {
  foo_2!: number;
  bar_2!: string;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: IMain4) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Main4",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: IMain4): Main4 {
    return new Main4(p);
  }

  static fromAlias(data: Record<string, unknown>): Main4 {
    return Main4.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
