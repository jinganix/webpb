// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// SubTypeSubValue.proto

import * as Webpb from "webpb";
import * as SubTypeSubValueProto from "./SubTypeSubValueProto";

export enum SubTypeSubValueType {
  subTypeSubValue0 = 0,
  subTypeSubValue1 = 1,
  subTypeSubValue2 = 2,
}

export const enum ConstSubTypeSubValueType {
  subTypeSubValue0 = 0,
  subTypeSubValue1 = 1,
  subTypeSubValue2 = 2,
}

export interface ISubTypeSubValueSuper {
  type: SubTypeSubValueType;
}

export class SubTypeSubValueSuper implements ISubTypeSubValueSuper, Webpb.WebpbMessage {
  type!: SubTypeSubValueType;
  webpbMeta: () => Webpb.WebpbMeta;
  static fromAliases: Record<string, (data?: unknown) => SubTypeSubValueSuper> = {};

  static CLASS = "SubTypeSubValueSuper";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ISubTypeSubValueSuper) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "SubTypeSubValueSuper",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ISubTypeSubValueSuper): SubTypeSubValueSuper {
    return new SubTypeSubValueSuper(p);
  }

  static fromAlias(data?: unknown): SubTypeSubValueSuper {
    return SubTypeSubValueSuper.create(data as ISubTypeSubValueSuper);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface ISubTypeSubValue0 extends SubTypeSubValueProto.ISubTypeSubValueSuper {
  value: number;
}

export class SubTypeSubValue0 extends SubTypeSubValueProto.SubTypeSubValueSuper implements ISubTypeSubValue0, Webpb.WebpbMessage {
  value!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "SubTypeSubValue0";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ISubTypeSubValue0) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "SubTypeSubValue0",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ISubTypeSubValue0): SubTypeSubValue0 {
    return new SubTypeSubValue0(p);
  }

  static fromAlias(data?: unknown): SubTypeSubValue0 {
    return SubTypeSubValue0.create(data as ISubTypeSubValue0);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface ISubTypeSubValue1 extends SubTypeSubValueProto.ISubTypeSubValueSuper {
  value: number;
}

export class SubTypeSubValue1 extends SubTypeSubValueProto.SubTypeSubValueSuper implements ISubTypeSubValue1, Webpb.WebpbMessage {
  value!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "SubTypeSubValue1";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ISubTypeSubValue1) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "SubTypeSubValue1",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ISubTypeSubValue1): SubTypeSubValue1 {
    return new SubTypeSubValue1(p);
  }

  static fromAlias(data?: unknown): SubTypeSubValue1 {
    return SubTypeSubValue1.create(data as ISubTypeSubValue1);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

SubTypeSubValueProto.SubTypeSubValueSuper.fromAliases[SubTypeSubValueType.subTypeSubValue0] = SubTypeSubValue1.fromAlias;

export interface ISubTypeSubValue2 extends SubTypeSubValueProto.ISubTypeSubValueSuper {
  value: number;
}

export class SubTypeSubValue2 extends SubTypeSubValueProto.SubTypeSubValueSuper implements ISubTypeSubValue2, Webpb.WebpbMessage {
  value!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "SubTypeSubValue2";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ISubTypeSubValue2) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "SubTypeSubValue2",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ISubTypeSubValue2): SubTypeSubValue2 {
    return new SubTypeSubValue2(p);
  }

  static fromAlias(data?: unknown): SubTypeSubValue2 {
    return SubTypeSubValue2.create(data as ISubTypeSubValue2);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

SubTypeSubValueProto.SubTypeSubValueSuper.fromAliases[SubTypeSubValueType.subTypeSubValue1] = SubTypeSubValue2.fromAlias;
SubTypeSubValueProto.SubTypeSubValueSuper.fromAliases[SubTypeSubValueType.subTypeSubValue2] = SubTypeSubValue2.fromAlias;

export interface ISubTypeSubValue3 {
  value: number;
}

export class SubTypeSubValue3 implements ISubTypeSubValue3, Webpb.WebpbMessage {
  value!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "SubTypeSubValue3";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: ISubTypeSubValue3) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "SubTypeSubValue3",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: ISubTypeSubValue3): SubTypeSubValue3 {
    return new SubTypeSubValue3(p);
  }

  static fromAlias(data?: unknown): SubTypeSubValue3 {
    return SubTypeSubValue3.create(data as ISubTypeSubValue3);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
