// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// WebpbOpts.proto

import * as Webpb from "webpb";

export interface ILevel3 {
  test1: number;
}

export class Level3 implements ILevel3, Webpb.WebpbMessage {
  test1!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: ILevel3) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "Level3",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: ILevel3): Level3 {
    return new Level3(p);
  }

  static fromAlias(data: Record<string, unknown>): Level3 {
    const p = Webpb.toAlias(data, {
      "a": "test1",
    });
    return Level3.create(p);
  }

  toWebpbAlias(): unknown {
    return Webpb.toAlias(this, {
      "test1": "a",
    });
  }
}

export interface ILevel2 {
  test1: number;
  test2: ILevel3;
  test3: ILevel3[];
}

export class Level2 implements ILevel2, Webpb.WebpbMessage {
  test1!: number;
  test2!: ILevel3;
  test3!: ILevel3[];
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: ILevel2) {
    Webpb.assign(p, this, []);
    p?.test2 !== undefined && (this.test2 = Level3.create(p.test2));
    p?.test3 !== undefined && (this.test3 = p.test3.map(x => Level3.create(x)));
    this.webpbMeta = () => (p && {
      class: "Level2",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: ILevel2): Level2 {
    return new Level2(p);
  }

  static fromAlias(data: Record<string, unknown>): Level2 {
    const p = Webpb.toAlias(data, {
      "a": "test1",
      "b": "test2",
      "c": "test3",
    });
    p.test2 && (p.test2 = Level3.fromAlias(p.test2));
    p.test3 && (p.test3 = p.test3.map(x => Level3.fromAlias(x)));
    return Level2.create(p);
  }

  toWebpbAlias(): unknown {
    const p = Webpb.toAlias(this, {
      "test1": "a",
      "test2": "b",
      "test3": "c",
    });
    p.b && (p.b = p.b.toWebpbAlias());
    p.c && (p.c = p.c.map(x => x.toWebpbAlias()));
    return p;
  }
}

export interface ILevel1 {
  test1: number;
  test2: ILevel2;
  test3: ILevel2[];
  test4: ILevel3;
  test5: Record<number, ILevel3>;
  test6: Record<string, ILevel3>;
}

export class Level1 implements ILevel1, Webpb.WebpbMessage {
  test1!: number;
  test2!: ILevel2;
  test3!: ILevel2[];
  test4!: ILevel3;
  test5!: Record<number, ILevel3>;
  test6!: Record<string, ILevel3>;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: ILevel1) {
    Webpb.assign(p, this, []);
    p?.test2 !== undefined && (this.test2 = Level2.create(p.test2));
    p?.test3 !== undefined && (this.test3 = p.test3.map(x => Level2.create(x)));
    p?.test4 !== undefined && (this.test4 = Level3.create(p.test4));
    p?.test5 !== undefined && (this.test5 = Webpb.mapValues(p.test5, x => Level3.create(x)));
    p?.test6 !== undefined && (this.test6 = Webpb.mapValues(p.test6, x => Level3.create(x)));
    this.webpbMeta = () => (p && {
      class: "Level1",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: ILevel1): Level1 {
    return new Level1(p);
  }

  static fromAlias(data: Record<string, unknown>): Level1 {
    const p = Webpb.toAlias(data, {
      "a": "test1",
      "b": "test2",
      "c": "test3",
      "d": "test4",
      "e": "test5",
      "f": "test6",
    });
    p.test2 && (p.test2 = Level2.fromAlias(p.test2));
    p.test3 && (p.test3 = p.test3.map(x => Level2.fromAlias(x)));
    p.test4 && (p.test4 = Level3.fromAlias(p.test4));
    p.test5 && (p.test5 = Webpb.mapValues(p.test5, x => Level3.fromAlias(x)));
    p.test6 && (p.test6 = Webpb.mapValues(p.test6, x => Level3.fromAlias(x)));
    return Level1.create(p);
  }

  toWebpbAlias(): unknown {
    const p = Webpb.toAlias(this, {
      "test1": "a",
      "test2": "b",
      "test3": "c",
      "test4": "d",
      "test5": "e",
      "test6": "f",
    });
    p.b && (p.b = p.b.toWebpbAlias());
    p.c && (p.c = p.c.map(x => x.toWebpbAlias()));
    p.d && (p.d = p.d.toWebpbAlias());
    p.e && (p.e = Webpb.mapValues(p.e, x => x.toWebpbAlias()));
    p.f && (p.f = Webpb.mapValues(p.f, x => x.toWebpbAlias()));
    return p;
  }
}
