// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// ImportTest.proto

import * as Webpb from "webpb";
import * as NoPackageProto from "./NoPackageProto";

export interface IImportTest extends NoPackageProto.INoPackage {
  foo_2: number;
  bar_2: string;
  no_package: NoPackageProto.INoPackage;
}

export class ImportTest extends NoPackageProto.NoPackage implements IImportTest, Webpb.WebpbMessage {
  foo_2!: number;
  bar_2!: string;
  no_package!: NoPackageProto.INoPackage;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "ImportTest";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: IImportTest) {
    super();
    Webpb.assign(p, this, []);
    p?.no_package && (this.no_package = NoPackageProto.NoPackage.create(p.no_package));
    this.webpbMeta = () =>
      ({
        class: "ImportTest",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: IImportTest): ImportTest {
    return new ImportTest(p);
  }

  static fromAlias(data?: unknown): ImportTest {
    const p = data as Record<string, unknown>;
    p?.no_package && (p.no_package = NoPackageProto.NoPackage.fromAlias(p.no_package));
    return Object.assign(new ImportTest(), p);
  }

  toWebpbAlias(): unknown {
    return Webpb.toAlias(this, {});
  }
}
