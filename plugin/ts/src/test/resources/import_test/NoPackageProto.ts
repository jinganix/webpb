// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// NoPackage.proto

import * as Webpb from "webpb";

export interface INoPackageTest {
  foo: number;
}

export class NoPackageTest implements INoPackageTest, Webpb.WebpbMessage {
  foo!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: INoPackageTest) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () => (p && {
      class: "NoPackageTest",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: INoPackageTest): NoPackageTest {
    return new NoPackageTest(p);
  }

  static fromAlias(data: Record<string, unknown>): NoPackageTest {
    return NoPackageTest.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface INoPackage {
  foo_1: number;
  bar_2: string;
  test: INoPackageTest;
}

export class NoPackage implements INoPackage, Webpb.WebpbMessage {
  foo_1!: number;
  bar_2!: string;
  test!: INoPackageTest;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: INoPackage) {
    Webpb.assign(p, this, []);
    p?.test !== undefined && (this.test = NoPackageTest.create(p.test));
    this.webpbMeta = () => (p && {
      class: "NoPackage",
      context: "",
      method: "",
      path: "",
    }) as Webpb.WebpbMeta;
  }

  static create(p: INoPackage): NoPackage {
    return new NoPackage(p);
  }

  static fromAlias(data: Record<string, unknown>): NoPackage {
    return NoPackage.create(data as any);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
