// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// NoPackage.proto

import * as Webpb from "webpb";

export interface INoPackageTest {
  foo: number;
}

export class NoPackageTest implements INoPackageTest, Webpb.WebpbMessage {
  foo!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: INoPackageTest) {
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "NoPackageTest",
        context: "",
        method: "",
        path: "",
      }) as Webpb.WebpbMeta;
  }

  static create(p?: INoPackageTest): NoPackageTest {
    return new NoPackageTest(p);
  }

  static fromAlias(data?: unknown): INoPackageTest {
    return NoPackageTest.create(data as INoPackageTest);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}

export interface INoPackage {
  foo_1: number;
  bar_2: string;
  test: INoPackageTest;
}

export class NoPackage implements INoPackage, Webpb.WebpbMessage {
  foo_1!: number;
  bar_2!: string;
  test!: INoPackageTest;
  webpbMeta: () => Webpb.WebpbMeta;

  protected constructor(p?: INoPackage) {
    Webpb.assign(p, this, []);
    p?.test && (this.test = NoPackageTest.create(p.test));
    this.webpbMeta = () =>
      ({
        class: "NoPackage",
        context: "",
        method: "",
        path: "",
      }) as Webpb.WebpbMeta;
  }

  static create(p?: INoPackage): NoPackage {
    return new NoPackage(p);
  }

  static fromAlias(data?: unknown): NoPackage {
    const p = data as Record<string, unknown>;
    p?.test && (p.test = NoPackageTest.fromAlias(p.test));
    return Object.assign(new NoPackage(), p);
  }

  toWebpbAlias(): unknown {
    return Webpb.toAlias(this, {});
  }
}
