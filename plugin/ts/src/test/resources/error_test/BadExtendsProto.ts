// Code generated by Webpb compiler, do not edit.
// https://github.com/jinganix/webpb
// BadExtends.proto

import * as Webpb from "webpb";

export interface IBadExtends extends IBadExtendsFoo<"foo"> {
  value: number;
}

export class BadExtends extends BadExtendsFoo<"foo"> implements IBadExtends, Webpb.WebpbMessage {
  value!: number;
  webpbMeta: () => Webpb.WebpbMeta;

  static CLASS = "BadExtends";
  static CONTEXT = "";
  static METHOD = "";
  static PATH = "";

  protected constructor(p?: IBadExtends) {
    super();
    Webpb.assign(p, this, []);
    this.webpbMeta = () =>
      ({
        class: "BadExtends",
        context: "",
        method: "",
        path: "",
      } as Webpb.WebpbMeta);
  }

  static create(p?: IBadExtends): BadExtends {
    return new BadExtends(p);
  }

  static fromAlias(data?: unknown): BadExtends {
    return BadExtends.create(data as IBadExtends);
  }

  toWebpbAlias(): unknown {
    return this;
  }
}
